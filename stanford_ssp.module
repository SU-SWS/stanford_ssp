<?php
/**
 * @file
 * Code for the Stanford SimpleSAML PHP module.
 */

/**
 * Implements hook_menu().
 */

function stanford_ssp_menu() {
  $items = array();

  // Authpoint
  // ---------

  $items['sso/login'] = array(
    'title' => "Stanford SSO Authentication Endpoint",
    'description' => "Authentication endpoint.",
    'page callback' => 'stanford_ssp_sso_auth',
    'access callback' => "user_is_anonymous",
  );

  $items['sso/denied-test'] = array(
    'title' => "Always denied",
    'description' => "Authentication endpoint test.",
    'page callback' => 'stanford_ssp_sso_auth',
    'access callback' => FALSE,
  );

  // Configuration Forms
  // -------------------

  $items['admin/config/stanford/stanford_ssp'] = array(
    'title' => "Stanford SSO",
    'description' => "Stanford Single Sign On configuration settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_configuration_form"),
    'access arguments' => array('administer stanford_ssp'),
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/settings'] = array(
    'title' => "Stanford SSO",
    'description' => "Stanford Single Sign On configuration settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_configuration_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/authorizations'] = array(
    'title' => "Authorizations",
    'description' => "Configure authorization dynamics.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_authorizations_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/role-mappings'] = array(
    'title' => "Role Mappings",
    'description' => "Configure role assignments for authenticated users.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_role_mappings_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/login-block-forms'] = array(
    'title' => "Login Block & Forms",
    'description' => "Configure role assignments for authenticated users.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_login_block_forms_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/add-sso-user'] = array(
    'title' => "Add SSO User",
    'description' => "Create a new user through the SSO.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_add_sso_user"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function stanford_ssp_menu_alter(&$items) {
  // Disable the simplesamlphp_auth settings pages because we override everything.
  $items['admin/config/people/simplesamlphp_auth']['access callback'] = 'stanford_ssp_user_one_access_only';
  $items['admin/config/people/simplesamlphp_auth/basic']['access callback'] = 'stanford_ssp_user_one_access_only';
  $items['admin/config/people/simplesamlphp_auth/sync']['access callback'] = 'stanford_ssp_user_one_access_only';
  $items['admin/config/people/simplesamlphp_auth/local']['access callback'] = 'stanford_ssp_user_one_access_only';
}

/**
 * Allow access for user 1 only.
 * @return bool
 *   True if user 1 is logged in.
 */
function stanford_ssp_user_one_access_only() {
  global $user;
  if (isset($user->uid) && $user->uid == 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function stanford_ssp_permission() {
  return array(
    'administer stanford_ssp' => array(
      'title' => t('Administer Stanford SSP'),
      'description' => t('Administrate the configuration for the Stanford SSP module.'),
    ),
  );
}

/**
 * Implements hook_init().
 *
 * Tried to use hook boot but too few api functions were available.
 */
function stanford_ssp_init() {

  // If the user is anonymous then end the journey.
  // We don't worry about those suckers.
  $anon = user_is_anonymous();
  if ($anon) {
    return;
  }

  // Check to force https for authenticated users.
  stanford_ssp_force_https();

  // Check for cache setting:
  if (variable_get("stanford_ssp_prevent_cache", FALSE)) {
    header("Cache-Control: no-store, no-cache, must-revalidate");
  }

}

/**
 * Implements hook_user_login().
 */
function stanford_ssp_user_login() {
  // Redirect the user if setting available.
  $redir = variable_get("stanford_ssp_redirect_on_login", FALSE);
  if (!empty($redir)) {
    drupal_goto($redir);
  }
}

/**
 * Authentication Endpoint.
 *
 * Use this endpoint instead of the default `saml_login` endpoint included in
 * the simplesaml module as it is easier to make adjustments prior to firing
 * off that sequence through this function. For example: Check if the force
 * https is on.
 *
 * @return array
 *   Render array.
 */
function stanford_ssp_sso_auth() {
  $output = array();

  // Check to force https for authenticated users.
  stanford_ssp_force_https();

  // A way in to simplesaml.
  module_load_include("inc", "simplesamlphp_auth", "simplesamlphp_auth.pages");
  simplesamlphp_auth_loginpage();

  return $output;
}

/**
 * Enforces the use https configuration setting.
 *
 * Checks to ensure user is on https and will force redirect if option is on.
 * Also enforces secure cookies on https.
 *
 */
function stanford_ssp_force_https() {

  global $is_https;
  // If is https force secure cookies. Mmmmm cookies.
  if ($is_https) {
    // Mandate secure cookies for sessions.
    ini_set('session.cookie_secure', 1);
    // Session cookies should be deleted when the browser session ends.
    ini_set('session.cookie_lifetime', 0);
    return;
  }

  // Check if setting is on. If not then end.
  $force = variable_get("stanford_ssp_force_https", FALSE);
  if (!$force) {
    return;
  }

  // Force a redirect to https.
  $redirect_url = "https://" . check_plain($_SERVER['HTTP_HOST']) . check_plain($_SERVER['REQUEST_URI']);
  header("Location: " . $redirect_url);
  drupal_exit();

}

/**
 * Handles 403 page errors and provided the automagic redirection to SAML login.
 *
 * @param array &$page
 *   The page render array.
 */
function stanford_ssp_page_build(&$page) {
  // We don't wnat to mess with the 403 page setting so we should check the
  // header response on the page build.
  $headers = drupal_get_http_header();
  if (user_is_anonymous() && isset($headers["status"]) && $headers["status"] == "403 Forbidden") {
    if (variable_get("stanford_ssp_automagic_login", FALSE)) {
      unset($_GET['destination']);
      drupal_goto("sso/login");
    }
  }
}


/**
 * Provide a different lookup mechanism other than by user name.
 * Needs a patch from https://www.drupal.org/node/2635152 in order for this
 * hook to exist. Without this hook, only username works for lookup.
 *
 * @param object $ext_user
 *    A loaded user object.
 * @param array $_simplesamlphp_auth_saml_attributes
 *   User's Attributes from the simplesaml response.
 * @param string $auth_field
 *   A field name.
 *
 */
function stanford_ssp_saml_ext_user_alter(&$ext_user, $_simplesamlphp_auth_saml_attributes, $auth_field) {

  // If a user has already been found we don't need to provide any extra work.
  if ($ext_user) {
    return;
  }

  // Debug.
  if (variable_get("stanford_ssp_debug", FALSE)) {
    watchdog("stanford_ssp", "stanford_ssp_saml_ext_user_alter: %attr", array("%attr" => serialize($_simplesamlphp_auth_saml_attributes)), WATCHDOG_DEBUG);
  }

  // Doh, username not found. Try email.
  $mail = $_simplesamlphp_auth_saml_attributes[variable_get("simplesamlphp_auth_mailattr", "mail")];
  $ext_user = user_load_by_mail($mail);

  // If still no user try sunet id.
  if (!$ext_user) {
    $sunet = $_simplesamlphp_auth_saml_attributes["uid"];
    if (is_array($sunet)) {
      $sunet = array_pop($sunet);
    }
    $ext_user = stanford_ssp_user_load_by_sunetid($sunet);
  }

}

/**
 * Loads a user by sunet id.
 *
 * @return mixed
 *   A loaded user object or false if could not be loaded.
 */
function stanford_ssp_user_load_by_sunetid($sunetid) {
  $uid = db_select("stanford_ssp_sunetid", "sss")
        ->fields("sss", array("uid"))
        ->condition("sunet", check_plain($sunetid))
        ->execute()
        ->fetchField();

  if (is_numeric($uid)) {
    return user_load($uid);
  }

  return FALSE;
}

/**
 * Returns the sunet id of a user by their Drupal uid.
 *
 * @param  int $uid
 *   Drupal user account id
 *
 * @return mixed
 *   string if valid account found.
 *   False if none.
 */
function stanford_ssp_get_sunetid_by_uid($uid) {
  $uid = (int) $uid;
  $r = db_select("stanford_ssp_sunetid", "sss")
    ->fields("sss", array("sunet"))
    ->condition("uid", $uid)
    ->execute()
    ->fetchObject();
  return (isset($r->sunet)) ? $r->sunet : FALSE;
}

/**
 * Implements hook_user_insert().
 */
function stanford_ssp_user_insert(&$edit, $account, $category) {

  if (!_simplesaml_auth_autoload()) {
    return;
  }

  // Get the users attributes.
  module_load_include("inc", "simplesamlphp_auth", "simplesamlphp_auth");
  $attributes = simplesamlphp_auth_get_attributes();

  // If the new account and the current user don't have matching emails then
  // the account must have been created by a form instead of through login.
  if (isset($attributes['email'][0]) && ($attributes['email'][0] !== $account->init)) {
    return;
  }

  // Act on the current user.
  if (!empty($attributes)) {
    $record = array(
      'sunet' => array_pop($attributes['uid']),
      'uid' => $account->uid,
    );
    drupal_write_record("stanford_ssp_sunetid", $record);
  }
}

/**
 * Implements hook_user_delete().
 */
function stanford_ssp_user_delete($account) {
  // Remove tracking from the schema.
  db_delete('stanford_ssp_sunetid')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_simplesamlphp_auth_allow_login.
 *
 * @param array $attributes
 *   SAML Attributes.
 *
 * @return bool
 *   True if ok. False is not allowed to log in.
 */
function stanford_ssp_simplesamlphp_auth_allow_login($attributes) {

  // Is the user allowed to log in?
  $isok = TRUE;

  // If the checks are off then just let it pass.
  if (variable_get("stanford_ssp_auth_restrictions", "allow") !== "restrict") {
    return $isok;
  }

  $sunets = variable_get("stanford_ssp_auth_restriction_sunet", FALSE);
  $groups = variable_get("stanford_ssp_auth_restriction_group", FALSE);

  // First check list of sunets.
  if (!empty($sunets)) {
    $sunets = explode(",", $sunets);
    $sunets = array_map("trim", $sunets);
    $isok = stanford_ssp_simplesamlphp_auth_allow_login_validate_sunets($sunets, $attributes);
  }

  // If the sunets are ok we should check the groups.
  if (!empty($groups) && $isok) {
    $groups = explode(",", $groups);
    $groups = array_map("trim", $groups);
    $isok = stanford_ssp_simplesamlphp_auth_allow_login_validate_groups($groups, $attributes);
  }

  // Return true or false.
  return $isok;
}

/**
 * Validates a list of sunets against the user that is trying to log in.
 * @param  [type] $sunets     [description]
 * @param  [type] $attributes [description]
 * @return [type]             [description]
 */
function stanford_ssp_simplesamlphp_auth_allow_login_validate_sunets($sunets, $attributes) {
  $sunetid = array_pop($attributes['uid']);
  return in_array($sunetid, $sunets);
}

/**
 * [stanford_ssp_simplesamlphp_auth_allow_login_validate_groups description]
 * @param  [type] $groups     [description]
 * @param  [type] $attributes [description]
 * @return [type]             [description]
 */
function stanford_ssp_simplesamlphp_auth_allow_login_validate_groups($groups, $attributes) {
  $samlgroups = $attributes['eduPersonEntitlement'];
  return (count(array_intersect($groups, $samlgroups)) > 0);
}

/**
 * Implements simplesamlphp_auth_user_roles_alter()
 * @param  [type] $roles [description]
 * @return [type]        [description]
 */
function stanford_ssp_simplesamlphp_auth_user_roles_alter($user) {
  global $_simplesamlphp_auth_as;

  // No authenticated user to work on. Go to bed.
  if (!$_simplesamlphp_auth_as->isAuthenticated()) {
    return;
  }

  // Action to perform when evaluating roles.
  $operation = variable_get("stanford_ssp_auth_role_map", "none");

  // If the action to do is none then we can end this function.
  if ($operation == "none") {
    return;
  }

  // We want to map eduPersonAffiliation to roles when not none.
  stanford_ssp_auth_role_map_person_affiliation($user);

  // What roles are matchy pants.
  $roles = _simplesamlphp_auth_rolepopulation(variable_get('simplesamlphp_auth_rolepopulation', ''));
  $user_roles = user_roles();
  $userinfo = FALSE;
  $values = array_intersect_key($user_roles, $roles);

  // Do the op.
  switch ($operation) {

    // Much like simplesamlphp_auths re-assign roles option this will replace
    // all of the users roles with the ones that were matched in the mapping.
    case 'reassign':
      $userinfo = array('roles' => $values);
      break;

    // Unline implesamlphp_auths re-assign roles option this will only add/grant
    // additional roles to the user.
    case 'grant':
      $values = $user->roles + $values;
      $userinfo = array('roles' => $values);
      break;
  }

  // Always add the SSO User role if it exists.
  $sso_user_role = user_role_load_by_name("SSO User");
  if ($sso_user_role) {
    $userinfo['roles'][$sso_user_role->rid] = $sso_user_role->name;
  }

  // Save the new roles.
  $user = user_save($user, $userinfo);

}

/**
 * Maps the affiliations to the user roles.
 * @param object $user
 *   The user to check the attributes on. Probably should be the currently
 *   logged in user as the attributes come from that user anyhow.
 */
function stanford_ssp_auth_role_map_person_affiliation($user) {
  $roles = user_roles();
  $attributes = simplesamlphp_auth_get_attributes();
  $affiliations = $attributes['eduPersonAffiliation'];

  // Role mapping array goes as such:
  // regex => role name.
  $maps = array(
    '/faculty/i' => 'Stanford Faculty',
    '/staff/i' => 'Stanford Staff',
    '/postdoc/i' => 'Stanford Student',
    '/student/i' => 'Stanford Student',
    // '/member/' => 'SSO User',
    // '/affiliate/' => 'SSO User',
  );

  // Loop through the expressions looking for matches in the maps array.
  $matches = array();
  foreach ($maps as $expression => $role_name) {
    $has_matches = preg_grep($expression, $affiliations);

    // If any of the affiliations match the pattern add it to the matches array
    // keying by id so that we don't get duplicates.
    if (count($has_matches)) {
      // Check to see if the role exist. It may have been deleted.
      $role = user_role_load_by_name($role_name);
      if ($role) {
        $matches[$role->rid] = $role->name;
      }
    }

  }

  // If anything was matched save the user.
  if (count($matches)) {
    $user = user_save($user, array('roles' => $matches));
  }

}

/**
 * *****************************************
 * FORM ALTERS
 * *****************************************
 */

/**
 * User account form.
 * @param  [type] &$form       [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_form_user_profile_form_alter(&$form, &$form_state) {

  // Remove enable this user as saml checkbox.
  unset($form["saml"]);

  // Check for editing a user. If we don't have a user we can end.
  $account = isset($form["#user"]) ? $form["#user"] : FALSE;
  if (!$account) {
    return;
  }

  // Check to see if user is a SAML user.
  $sunet = stanford_ssp_get_sunetid_by_uid($account->uid);
  if (!$sunet) {
    return;
  }

  // If a saml user check to see if they can use the password fields.
  if (!variable_get("simplesamlphp_auth_allowsetdrupalpwd", FALSE)) {
    $form["account"]['pass']['#access'] = FALSE;
  }

}
/**
 * Implements hook_form_FORMID_alter().
 *
 * @param  [type] &$form       [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_form_user_login_alter(&$form, &$form_state) {

  // Check for https forcing:
  stanford_ssp_force_https();

  // Remove the Federated login link because it is ugly.
  if (isset($form["links"])) {
    unset($form["links"]);
  }

  $show_sso = variable_get("stanford_ssp_show_sso_login", TRUE);
  $show_local = variable_get("stanford_ssp_show_local_login", TRUE);
  $sso_on = variable_get("simplesamlphp_auth_activate", FALSE);
  $local_on = variable_get("simplesamlphp_auth_allowdefaultlogin", TRUE);

  // Display (or not) the login link for SSO (SAML).
  if ($show_sso && $sso_on) {
    $form['saml_auth'] = array(
      '#type' => 'fieldset',
      '#title' => "SUNet Login",
      '#weight' => -10,
    );
    $link_text = variable_get("stanford_ssp_sso_link_text", t("Log in with your SUNet ID »"));
    $form['saml_auth']['saml_link'] = array(
      '#prefix' => "<p>",
      '#markup' => l($link_text, "sso/login"),
      '#suffix' => "</p>",
    );
  }

  // If local logen form is enabled add a fieldset to title it.
  if ($show_local && $local_on) {
    // Add the fieldset for the Drupal login form.
    $form['drupal_auth'] = array(
      '#type' => 'fieldset',
      '#title' => "Drupal Login",
      '#weight' => 0,
    );
  }

  // If not showing local we need to unset the login form items.
  if (!$show_local || !$local_on) {
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);
  }

  // If nothing available print out a message.
  if (!$show_local && !$show_sso) {
    $form["nothingtoseehere"]["#markup"] = "<h3>No login options available.</h3>";
  }

}

/**
 * Formats workgroup entitlment.
 *
 * Eg: anchorage:humanbiology-admins to anchorage_humanbiology-admins.
 *
 * @param string $entitlement
 *   Eg: anchorage:humanbiology-admins.
 *
 * @return string
 *   eg: anchorage_humanbiology-admins
 */
function stanford_ssp_format_entitlement($entitlement) {
  $entitlement = strtolower($entitlement);
  $entitlement = str_replace(":", "_", $entitlement);
  return $entitlement;
}
