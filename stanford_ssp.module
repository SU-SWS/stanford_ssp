<?php
/**
 * @file
 * Code for the Stanford SimpleSAML PHP module.
 */

/**
 * Implements hook_menu().
 */

function stanford_ssp_menu() {
  $items = array();

  $items['admin/config/stanford/stanford_ssp'] = array(
    'title' => "Stanford SSO (SAML)",
    'description' => "Stanford Single Sign On (SAML) configuration settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_configuration_form"),
    'access arguments' => array('administer stanford_ssp'),
  );

  // $items['stanford_ssp/403'] = array(
  //   'page callback' => 'stanford_ssp_error_page',
  //   'access callback' => 'stanford_ssp_access_check',
  //   'type' => MENU_CALLBACK,
  // );
  // $items['admin/config/people/simplesamlphp_auth/config'] = array(
  //   'type' => MENU_DEFAULT_LOCAL_TASK,
  //   'title' => 'SimpleSAML PHP Configuration',
  //   'weight' => -1,
  // );
  // $items['admin/config/people/simplesamlphp_auth/mappings'] = array(
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('stanford_ssp_mapping_form'),
  //   'access arguments' =>  array('administer users'),
  //   'type' => MENU_LOCAL_TASK,
  //   'title' => 'Role Mappings',
  //   'weight' => 0,
  // );

  return $items;
}

/**
 * Implements hook_permission().
 */
function stanford_ssp_permission() {
  return array(
    'administer stanford_ssp' =>  array(
      'title' => t('Administer Stanford SSP'),
      'description' => t('Administrate the configuration for the Stanford SSP module.'),
    ),
  );
}

/**
 * The main landing page for the configuration form.
 * @param  [type] $form        [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_configuration_form($form = array(), &$form_state) {

  $form['togglers'] = array(
    '#title' => t('General Configuration'),
    '#type' => 'fieldset',
    '#collapsed' => FALSE,
    '#collapsible' => FALSE,
    '#description' => t('General settings for the use of this module.'),
  );

  // Enables / Disables user authentication by simplesamlphp.
  $form['togglers']['simplesamlphp_auth_activate'] = array(
    '#type' => 'switch',
    '#title' => t('Enable authentication by SSO'),
    '#description' => t("Enabling before configuring the module could lock you out of your website."),
    '#default_value' => variable_get('simplesamlphp_auth_activate', FALSE),
  );

  // Enables / Disables user authentication by simplesamlphp.
  $form['togglers']['stanford_ssp_local_activate'] = array(
    '#type' => 'switch',
    '#title' => t('Enable authentication by local Drupal accounts'),
    '#description' => t("Enable to allow users to log in with local Drupal accounts."),
    '#default_value' => variable_get('stanford_ssp_local_activate', TRUE),
  );

  $form['togglers']['simplesamlphp_auth_registerusers'] = array(
    '#type' => 'switch',
    '#title' => t('Register users (i.e., auto-provisioning)'),
    '#default_value' => variable_get('simplesamlphp_auth_registerusers', TRUE),
    '#description' => t("Determines wether or not the module should automatically create/register new Drupal accounts for users that authenticate using SimpleSAMLphp. Unless you've done some custom work to provision Drupal accounts with the necessary authmap entries you will want this checked. NOTE: If unchecked each user must already have been provisioned a Drupal account with an appropriate entry in the authmap table before logging in. Otherwise they will receive a notice and be denied access. Be aware that simply creating a Drupal account will not create the necessary entry in the authmap table."),
  );

  // Enables automatic login when hitting a 403.
  $form['togglers']['stanford_ssp_automagic_login'] = array(
    '#type' => 'switch',
    '#title' => t('Enable automatic login'),
    '#description' => t("Try to authenticate the user if they are presented with a 403 access denied response."),
    '#default_value' => variable_get('stanford_ssp_automagic_login', TRUE),
  );

  $form['togglers']['stanford_ssp_force_https'] = array(
    '#type' => 'switch',
    '#title' => t('Force users to log in with HTTPS.'),
    '#default_value' => variable_get('stanford_ssp_force_https', FALSE),
    '#description' => t("Should be enabled on production websites."),
  );

  $form['togglers']['stanford_ssp_prevent_cache'] = array(
    '#type' => 'switch',
    '#title' => t('Prevent the browser from caching pages for authenticated users.'),
    '#default_value' => variable_get('stanford_ssp_prevent_cache', FALSE),
    '#description' => t("Pages for logged in users can be dynamic and if the browser caches them, there could be stale information displayed."),
  );

  return system_settings_form($form);
}

























































































/**
 * Handle 403 errors by redirecting users to saml_login for login.
 *
 * If, however, they are already logged in and don't have access
 * (for instance, a normal user requesting /admin), then display
 * a normal error message.
 */
// function stanford_ssp_error_page() {
//   // Figure out where the user is trying to go before redirecting him.
//   $dest = drupal_get_destination();
//   // We have to unset $_GET['destination'] here, otherwise drupal_goto() will ignore the $path argument.
//   // See https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_goto/7.
//   unset($_GET['destination']);
//   // Redirect the user to saml_login, then send him on his way.
//   drupal_goto('saml_login', array('query' => $dest));
// }

/**
 *
 * Implements hook_form().
 *
 * Configuration form for the SimpleSAML PHP role mapping.
 *
 * @param $form
 * @param $form_state
 */
// function stanford_ssp_mapping_form($form, &$form_state) {
//   $roles = user_roles(TRUE);
//   $roles = array_combine($roles, $roles);
//   $form['mappings'] = array(
//     '#type' => 'fieldset',
//     '#title' => t('Role Mappings'),
//     '#description' => t('Map a SimpleSAML PHP entitlement to a Drupal role.'),
//   );
//   $form['mappings']['entitlement'] = array(
//     '#type' => 'textfield',
//     '#title' => t('Entitlement'),
//     '#required' => TRUE,
//   );
//   $form['mappings']['role'] = array(
//     '#type' => 'select',
//     '#title' => t('Drupal Role'),
//     '#required' => TRUE,
//     '#options' => $roles,
//   );
//   $form['submit'] = array(
//     '#type' => 'submit',
//     '#value' => t('Add Role Mapping'),
//   );
//   return $form;
// }

/**
 *
 * Implements hook_form_submit().
 *
 * @param $form
 * @param $form_state
 */
// function stanford_ssp_mapping_form_submit($form, &$form_state) {
//   $entitlement = $form_state['values']['entitlement'];
//   $role = $form_state['values']['role'];
//   stanford_ssp_map_entitlement_to_role($entitlement, $role);
// }

/**
 * @param string $entitlement A value in eduPersonEntitlement, e.g., anchorage_support
 * @param string $role The name of the role
 *
 * Map an entitlement to a role.
 */
// function stanford_ssp_map_entitlement_to_role($entitlement, $role) {
//   $entitlement = check_plain($entitlement);
//   // look up rid
//   $role_object = user_role_load_by_name($role);
//   if (!$role_object) {
//     drupal_set_message(t('No role exists with the name "@role"', array('@role' => $role)), 'error');
//   }
//   else {
//     $rid = $role_object->rid;
//     // look up current role mapping, if any
//     $role_mapping = variable_get('simplesamlphp_auth_rolepopulation');
//     if (!empty($role_mapping)) {
//       $role_mapping .= "|";
//     }
//     // Add our mapping
//     $role_mapping .= $rid . ":eduPersonEntitlement,=," . $entitlement;
//     // Save our mapping
//     variable_set('simplesamlphp_auth_rolepopulation', $role_mapping);
//     $message = t('Mapped the "@entitlement" entitlement to the "@role" role.', array('@entitlement' => $entitlement, '@role' => $role));
//     drupal_set_message($message);
//     watchdog('stanford_ssp', $message);
//   }
// }

/**
 * Implements hook_theme_registry_alter().
 */
// function stanford_ssp_theme_registry_alter(&$theme_registry) {
//   $theme_registry['webform_view_messages']['function'] = 'stanford_ssp_webform_login';
// }

/**
 * Overrides theme_webform_view_messages().
 * Send user to saml_login instead of user/login if he doesn't have access to the form.
 */
// function stanford_ssp_webform_login($variables) {
//   global $user;

//   $node = $variables['node'];
//   $page = $variables['page'];
//   $submission_count = $variables['submission_count'];
//   $user_limit_exceeded = $variables['user_limit_exceeded'];
//   $total_limit_exceeded = $variables['total_limit_exceeded'];
//   $allowed_roles = $variables['allowed_roles'];
//   $closed = $variables['closed'];
//   $cached = $variables['cached'];

//   $type = 'warning';

//   if ($closed) {
//     $message = t('Submissions for this form are closed.');
//   }
//   elseif ($node->webform['confidential'] && user_is_logged_in()) {
//     $message = t('This form is confidential. You much <a href="!url">Log out</a> to submit it.',
//       array('!url' => url('/user/logout', array('query' => array('destination' => request_uri())))));
//   }
//   // If open and not allowed to submit the form, give an explanation.
//   elseif (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
//     if (empty($allowed_roles)) {
//       // No roles are allowed to submit the form.
//       $message = t('Submissions for this form are closed.');
//     }
//     elseif ($user->uid == 0) {
//       // The user is anonymous, so (at least) needs to log in to view the form.
//       $login = url('saml_login', array('query' => drupal_get_destination()));
//       $register = url('user/register', array('query' => drupal_get_destination()));
//       if (variable_get('user_register', 1) == 0) {
//         $message = t('You must <a href="!login">log in with your SUNetID</a> to view this form.', array('!login' => $login));
//       }
//       else {
//         $message = t('You must <a href="!login">log in with your SUNetID</a> or <a href="!register">register</a> to view this form.', array('!login' => $login, '!register' => $register));
//       }
//     }
//     else {
//       // The user must be some other role to submit.
//       $message = t('You do not have permission to view this form.');
//       $type = 'error';
//     }
//   }

//   // If the user has exceeded the limit of submissions, explain the limit.
//   elseif ($user_limit_exceeded && !$cached) {
//     if ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] > 1) {
//       $message = t('You have submitted this form the maximum number of times (@count).', array('@count' => $node->webform['submit_limit']));
//     }
//     elseif ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] == 1) {
//       $message = t('You have already submitted this form.');
//     }
//     else {
//       $message = t('You may not submit another entry at this time.');
//     }
//   }
//   elseif ($total_limit_exceeded && !$cached) {
//     if ($node->webform['total_submit_interval'] == -1 && $node->webform['total_submit_limit'] > 1) {
//       $message = t('This form has received the maximum number of entries.');
//     }
//     else {
//       $message = t('You may not submit another entry at this time.');
//     }
//   }

//   // If the user has submitted before, give them a link to their submissions.
//   if ($submission_count > 0 && $node->webform['submit_notice'] == 1 && !$cached) {
//     if (empty($message)) {
//       $message = t('You have already submitted this form.');
//       $type = 'status';
//     }
//     $message .= ' ' . t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/' . $node->nid . '/submissions')));
//   }

//   if ($page && isset($message)) {
//     drupal_set_message($message, $type, FALSE);
//   }
// }

