<?php

/**
 * Maps the affiliations to the user roles.
 * @param object $user
 *   The user to check the attributes on. Probably should be the currently
 *   logged in user as the attributes come from that user anyhow.
 */
function stanford_ssp_auth_role_map_person_affiliation(&$user) {
  $roles = user_roles();
  $attributes = stanford_simplesamlphp_auth_get_attributes();
  $affiliations = $attributes['eduPersonAffiliation'];

  // Role mapping array goes as such:
  // regex => role name.
  $maps = array(
    '/faculty/i' => 'Stanford Faculty',
    '/staff/i' => 'Stanford Staff',
    '/postdoc/i' => 'Stanford Student',
    '/student/i' => 'Stanford Student',
    // '/member/' => 'SSO User',
    // '/affiliate/' => 'SSO User',
  );

  // Loop through the expressions looking for matches in the maps array.
  $matches = array();
  foreach ($maps as $expression => $role_name) {
    $has_matches = preg_grep($expression, $affiliations);

    // If any of the affiliations match the pattern add it to the matches array
    // keying by id so that we don't get duplicates.
    if (count($has_matches)) {
      // Check to see if the role exist. It may have been deleted.
      $role = user_role_load_by_name($role_name);
      if ($role) {
        $matches[$role->rid] = $role->name;
      }
    }

  }

  // If anything was matched save the user.
  if (count($matches)) {
    $final_roles = $user->roles + $matches;
    $user = user_save($user, array('roles' => $final_roles));
  }

}

/**
 * *****************************************
 * FORM ALTERS
 * *****************************************
 */

/**
 * User account form.
 * @param  [type] &$form       [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_form_user_profile_form_alter(&$form, &$form_state) {

  // Check for editing a user. If we don't have a user we can end.
  $account = isset($form["#user"]) ? $form["#user"] : FALSE;
  if (!$account) {
    return;
  }

  // Check to see if user is a SAML user.
  $sunet = stanford_ssp_get_sunetid_by_uid($account->uid);
  if (!$sunet) {
    return;
  }

  // If a saml user check to see if they can use the password fields.
  if (!variable_get("stanford_simplesamlphp_auth_allowsetdrupalpwd", FALSE)) {
    $form["account"]['pass']['#access'] = FALSE;
  }

}
/**
 * Implements hook_form_FORMID_alter().
 *
 * @param  [type] &$form       [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_form_user_login_alter(&$form, &$form_state) {

  // Check for https forcing:
  stanford_ssp_force_https();

  // Remove the Federated login link because it is ugly.
  if (isset($form["links"])) {
    unset($form["links"]);
  }

  $show_sso = variable_get("stanford_ssp_show_sso_login", TRUE);
  $show_local = variable_get("stanford_ssp_show_local_login", TRUE);
  $sso_on = variable_get("stanford_simplesamlphp_auth_activate", FALSE);
  $local_on = variable_get("stanford_simplesamlphp_auth_allowdefaultlogin", TRUE);

  // Display (or not) the login link for SSO (SAML).
  if ($show_sso && $sso_on) {
    $form['saml_auth'] = array(
      '#type' => 'fieldset',
      '#title' => "SUNet Login",
      '#weight' => -10,
    );
    $link_text = variable_get("stanford_ssp_sso_link_text", t("Log in with your SUNet ID Â»"));
    $form['saml_auth']['saml_link'] = array(
      '#prefix' => "<p>",
      '#markup' => l($link_text, "sso/login"),
      '#suffix' => "</p>",
    );
  }

  // If local login form is enabled add a fieldset to title it.
  if ($show_local && $local_on) {
    // Add the fieldset for the Drupal login form.
    $form['drupal_auth'] = array(
      '#type' => 'fieldset',
      '#title' => "Drupal Login",
      '#weight' => 0,
    );
  }

  // If not showing local we need to unset the login form items.
  if (!$show_local || !$local_on) {
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);
  }

  // If nothing available print out a message.
  if (!$show_local && !$show_sso) {
    $form["nothingtoseehere"]["#markup"] = "<h3>No login options available.</h3>";
  }

}
/**
 * Implements hook form alter.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function stanford_ssp_form_user_pass_alter(&$form, &$form_state) {
  $form["#validate"][] = "stanford_ssp_form_user_pass_alter_validate";
}

/**
 * Prevent password reset from working if local accounts turned off.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function stanford_ssp_form_user_pass_alter_validate($form, $form_state) {
  if (!variable_get("stanford_simplesamlphp_auth_allowdefaultlogin", TRUE)) {
    form_set_error("", t("We're sorry but local account login has been disabled. Password reset is not available at this time."));
  }
}

/**
 * Formats workgroup entitlment.
 *
 * Eg: anchorage:humanbiology-admins to anchorage_humanbiology-admins.
 *
 * @param string $entitlement
 *   Eg: anchorage:humanbiology-admins.
 *
 * @return string
 *   eg: anchorage_humanbiology-admins
 */
function stanford_ssp_format_entitlement($entitlement) {
  $entitlement = strtolower($entitlement);
  $entitlement = str_replace(":", "_", $entitlement);
  return $entitlement;
}
