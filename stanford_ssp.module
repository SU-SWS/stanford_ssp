<?php
/**
 * @file
 * Code for the Stanford SimpleSAML PHP module.
 */

/**
 * Implements hook_menu().
 */

function stanford_ssp_menu() {
  $items = array();

  $items['admin/config/stanford/stanford_ssp'] = array(
    'title' => "Stanford SSO (SAML)",
    'description' => "Stanford Single Sign On (SAML) configuration settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_configuration_form"),
    'access arguments' => array('administer stanford_ssp'),
  );

  $items['admin/config/stanford/stanford_ssp/settings'] = array(
    'title' => "Stanford SSO (SAML)",
    'description' => "Stanford Single Sign On (SAML) configuration settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_configuration_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/stanford/stanford_ssp/authorizations'] = array(
    'title' => "Authorizations",
    'description' => "Configure authorization dynamics.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_authorizations_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/stanford/stanford_ssp/role-mappings'] = array(
    'title' => "Role Mappings",
    'description' => "Configure role assignments for authenticated users.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_role_mappings_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/stanford/stanford_ssp/login-block-forms'] = array(
    'title' => "Login Block & Forms",
    'description' => "Configure role assignments for authenticated users.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_login_block_forms_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/stanford/stanford_ssp/add-sso-user'] = array(
    'title' => "Add SSO User",
    'description' => "Create a new user through the SSO.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_add_sso_user"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
  );

  // $items['admin/config/people/simplesamlphp_auth/config'] = array(
  //   'type' => MENU_DEFAULT_LOCAL_TASK,
  //   'title' => 'SimpleSAML PHP Configuration',
  //   'weight' => -1,
  // );

  // $items['admin/config/people/simplesamlphp_auth/mappings'] = array(
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('stanford_ssp_mapping_form'),
  //   'access arguments' =>  array('administer users'),
  //   'type' => MENU_LOCAL_TASK,
  //   'title' => 'Role Mappings',
  //   'weight' => 0,
  // );

  return $items;
}

/**
 * Implements hook_permission().
 */
function stanford_ssp_permission() {
  return array(
    'administer stanford_ssp' =>  array(
      'title' => t('Administer Stanford SSP'),
      'description' => t('Administrate the configuration for the Stanford SSP module.'),
    ),
  );
}

/**
 * The main landing page for the configuration form.
 * @param  [type] $form        [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_configuration_form($form = array(), &$form_state) {

  // Vertical Tab container.
  $form['togglers'] = array(
    '#type' => 'vertical_tabs',
    '#default_tab' => 'edit-general-config',
  );

  // Tab Groups
  // ----------------------------------------------------------------

  // Tab for the general options.
  $form['general-config'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Configuration'),
    '#collapsible' => TRUE,
    '#description' => t('Here you can configure the general settings for the use of this module.'),
    '#group' => 'togglers',
  );

  // Tab for the user options.
  $form['user-config'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Account Configuration'),
    '#collapsible' => TRUE,
    '#description' => t('Here you can configure the general settings for how global interactions happen with users.'),
    '#group' => 'togglers',
  );

  // Tab for the user options.
  $form['saml-config'] = array(
    '#type' => 'fieldset',
    '#title' => t('SAML Configuration'),
    '#collapsible' => TRUE,
    '#description' => t('SimpleSAMLPHP configuration options are set here.'),
    '#group' => 'togglers',
  );

  // General Config
  // ---------------------------------------------------------------

  // Enables / Disables user authentication by simplesamlphp.
  $form['general-config']['simplesamlphp_auth_activate'] = array(
    '#type' => 'switch',
    '#title' => t('Enable authentication by SSO'),
    '#description' => t("Enabling before configuring the module could lock you out of your website."),
    '#default_value' => variable_get('simplesamlphp_auth_activate', FALSE),
  );

  // Enables / Disables user authentication by Drupal.
  $form['general-config']['simplesamlphp_auth_allowdefaultlogin'] = array(
    '#type' => 'switch',
    '#title' => t('Allow authentication with local Drupal accounts'),
    '#default_value' => variable_get('simplesamlphp_auth_allowdefaultlogin', TRUE),
    '#description' => t('Check this box if you want to let people log in with local Drupal accounts (without using simpleSAMLphp). If you want to restrict this privilege to certain users you can enter the Drupal user IDs in the field below.'),
  );

  // Enables automatic login when hitting a 403.
  $form['general-config']['stanford_ssp_automagic_login'] = array(
    '#type' => 'switch',
    '#title' => t('Enable automatic login'),
    '#description' => t("Try to authenticate the user if they are presented with a 403 access denied response."),
    '#default_value' => variable_get('stanford_ssp_automagic_login', TRUE),
  );

  // Force users to log in over HTTPS.
  $form['general-config']['stanford_ssp_force_https'] = array(
    '#type' => 'switch',
    '#title' => t('Force users to log in with HTTPS.'),
    '#default_value' => variable_get('stanford_ssp_force_https', FALSE),
    '#description' => t("Should be enabled on production websites."),
  );

  $form['general-config'] ['stanford_ssp_redirect_on_login'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect all users on successfull login to this url.'),
    '#default_value' => variable_get('stanford_ssp_redirect_on_login', FALSE),
    '#description' => t("Force the redirect of all users to a specific url no matter where they logged in from."),
  );

  // User Config
  // ------------------------------------------------------------------

  // Auto create an account for users on auth.
  $form['user-config']['simplesamlphp_auth_registerusers'] = array(
    '#type' => 'switch',
    '#title' => t('Register users (i.e., auto-provisioning)'),
    '#default_value' => variable_get('simplesamlphp_auth_registerusers', TRUE),
    '#description' => t("Determines wether or not the module should automatically create/register new Drupal accounts for users that authenticate using SimpleSAMLphp. Unless you've done some custom work to provision Drupal accounts with the necessary authmap entries you will want this checked. NOTE: If unchecked each user must already have been provisioned a Drupal account with an appropriate entry in the authmap table before logging in. Otherwise they will receive a notice and be denied access. Be aware that simply creating a Drupal account will not create the necessary entry in the authmap table."),
  );

  // Connect existing user accounts.
  $form['user-config']['simplesamlphp_auth_autoenablesaml'] = array(
    '#type' => 'switch',
    '#title' => t('Automatically enable SAML authentication for existing users upon successful login'),
    '#default_value' => variable_get('simplesamlphp_auth_autoenablesaml', FALSE),
  );

  // Prevent the default cache for auth users.
  $form['user-config']['stanford_ssp_prevent_cache'] = array(
    '#type' => 'switch',
    '#title' => t('Prevent the browser from caching pages for authenticated users.'),
    '#default_value' => variable_get('stanford_ssp_prevent_cache', FALSE),
    '#description' => t("Pages for logged in users can be dynamic and if the browser caches them, there could be stale information displayed."),
  );

  // Allow for both local passwords and SAML based auth.
  $form['user-config']['simplesamlphp_auth_allowsetdrupalpwd'] = array(
    '#type' => 'switch',
    '#title' => t('Allow SAML users to set Drupal passwords.'),
    '#default_value' => variable_get('simplesamlphp_auth_allowsetdrupalpwd', FALSE),
    '#description' => t('Set this to ON if you want to let people set passwords for their local Drupal accounts. This will allow users to log in using either SAML or a local Drupal account. Disabling this removes the password change fields from the user profile form.<br/>NOTE: In order for them to login using their local Drupal password you must allow local logins with the settings below.'),
    '#states' => array(
      'enabled' => array(
        ':input[name="simplesamlphp_auth_allowdefaultlogin"]' => array('checked' => TRUE),
      ),
    ),
  );

  // SAML Config
  // ------------------------------------------------------------------

  $form['saml-config']['simplesamlphp_auth_installdir'] = array(
    '#type' => 'textfield',
    '#title' => t('Installation directory (default: /usr/share/simplesamlphp)'),
    '#default_value' => variable_get('simplesamlphp_auth_installdir', '/usr/share/simplesamlphp'),
    '#description' => t('The base directory of simpleSAMLphp. Absolute path with no trailing slash.'),
  );

  $form['saml-config']['simplesamlphp_auth_authsource'] = array(
    '#type' => 'textfield',
    '#title' => t('Authenticaton source for this SP (default: default-sp)'),
    '#default_value' => variable_get('simplesamlphp_auth_authsource', 'default-sp'),
    '#description' => t('The name of the source to use from /usr/share/simplesamlphp/config/authsources.php'),
  );

  $form['saml-config']['simplesamlphp_auth_user_name'] = array(
    '#type' => 'textfield',
    '#title' => t("Which attribute from simpleSAMLphp should be used as user's name"),
    '#default_value' => variable_get('simplesamlphp_auth_user_name', 'eduPersonPrincipalName'),
    '#description' => t('Example: <i>eduPersonPrincipalName</i> or <i>displayName</i><br />If the attribute is multivalued, the first value will be used.'),
    '#required' => TRUE,
  );

  $form['saml-config']['simplesamlphp_auth_unique_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Which attribute from simpleSAMLphp should be used as unique identifier for the user'),
    '#default_value' => variable_get('simplesamlphp_auth_unique_id', 'eduPersonPrincipalName'),
    '#description' => t('Example: <i>eduPersonPrincipalName</i> or <i>eduPersonTargetedID</i><br />If the attribute is multivalued, the first value will be used.'),
    '#required' => TRUE,
  );

  $form['saml-config']['simplesamlphp_auth_mailattr'] = array(
    '#type' => 'textfield',
    '#title' => t('Which attribute from simpleSAMLphp should be used as user mail address'),
    '#default_value' => variable_get('simplesamlphp_auth_mailattr', 'mail'),
    '#description' => t('Example: <i>mail</i><br />If the user attribute is multivalued, the first value will be used.'),
  );

  return system_settings_form($form);
}


/**
 * Authorization and authentication settings form.
 * @param  [type] $form        [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_authorizations_form($form, &$form_state) {


  // Vertical Tab container.
  $form['togglers'] = array(
    '#type' => 'vertical_tabs',
    '#default_tab' => 'edit-general-config',
  );

  // Tab Groups
  // ----------------------------------------------------------------

  // Tab for the general options.
  $form['saml-config'] = array(
    '#type' => 'fieldset',
    '#title' => t('SAML Accounts'),
    '#collapsible' => TRUE,
    '#group' => 'togglers',
  );

  // Tab for the user options.
  $form['local-config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Local Drupal Accounts'),
    '#collapsible' => TRUE,
    '#group' => 'togglers',
  );

  // SAML AUTH CONFIG
  // -------------------------------------------------------------------

  $options = array(
    'any' => t("Allow any valid SUNet user."),
    'restrict' => t("Restrict access to specific users and groups."),
  );

  $form['saml-config']['stanford_ssp_auth_restrictions'] = array(
    '#type' => 'radios',
    '#title' => t('SAML Authorization Restrictions.'),
    '#default_value' => variable_get('stanford_ssp_auth_restrictions', 'any'),
    '#options' => $options,
  );

  $form['saml-config']['stanford_ssp_auth_restriction_sunet'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed SUNet IDs'),
    '#default_value' => variable_get('stanford_ssp_auth_restriction_sunet', ''),
    '#description' => t('A comma-separated list of SUNet IDs that should be allowed to login with simpleSAMLphp. If left blank, any valid SUNet ID user can login.'),
    '#states' => array(
      'visible' => array(
        ':input[name="stanford_ssp_auth_restrictions"]' => array('value' => 'restrict'),
      ),
    ),
  );

  $form['saml-config']['stanford_ssp_auth_restriction_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed Workgroups'),
    '#default_value' => variable_get('stanford_ssp_auth_restriction_group', ''),
    '#description' => t('A comma-separated list of Workgroups that should be allowed to login with simpleSAMLphp. If left blank, any workgroup can login.'),
    '#states' => array(
      'visible' => array(
        ':input[name="stanford_ssp_auth_restrictions"]' => array('value' => 'restrict'),
      ),
    ),
  );

  // LOCAL AUTH CONFIG
  // -------------------------------------------------------------------

  $roles = user_roles(TRUE);
  $form['local-config']['simplesamlphp_auth_allowdefaultloginroles'] = array(
    '#type' => 'select',
    '#size' => 7,
    '#options' => $roles,
    '#multiple' => TRUE,
    '#title' => t('Which roles should be allowed to login with local accounts?'),
    '#default_value' => variable_get('simplesamlphp_auth_allowdefaultloginroles', array()),
    '#description' => t('Roles that should be allowed to login without simpleSAMLphp. Examples are dev/admin roles or guest roles.'),
  );

  $form['local-config']['simplesamlphp_auth_allowdefaultloginusers'] = array(
    '#type' => 'textfield',
    '#title' => t('Which users should be allowed to login with local accounts?'),
    '#default_value' => variable_get('simplesamlphp_auth_allowdefaultloginusers', ''),
    '#description' => t('Example: <i>1,2,3</i><br />A comma-separated list of user IDs that should be allowed to login without simpleSAMLphp. If left blank, all local accounts can login.'),
  );

  return system_settings_form($form);
}

/**
 * Role mapping form for mapping a role to an authenticated user.
 * @param  [type] $form        [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_role_mappings_form($form, &$form_state) {

  $options = array(
    'none' => t("Do not adjust roles. Allow local administration of roles only."),
    'merge' => t("Merge role mapping assignments with current account roles."),
    'reassign' => t("Re-evaluate roles on every log in."),
  );

  $form['stanford_ssp_auth_role_map'] = array(
    '#type' => 'radios',
    '#title' => 'Action to perform on successful authentication with SUNet ID',
    '#options' => $options,
    '#default_value' => variable_get("stanford_ssp_auth_role_map", 'none'),
  );

  // ROLE MAPPING FORM.

  $table = array();
  $submitted = !empty($form_state['post']);
  $roles = user_roles(TRUE);

  $form['new_rid'] = array(
    '#name' => 'new_rid',
    '#type' => 'select',
    '#options' => $roles,
  );

  $form['new_group'] = array(
    '#name' => 'new_group',
    '#type' => 'textfield',
    '#default_value' => '',
  );

  $form['new_submit'] = array(
    '#name' => 'new_submit',
    '#type' => 'submit',
    '#value' => t('Add Mapping'),
  );

  if (!$submitted) {
    $table[] = array(drupal_render($form['new_rid']), drupal_render($form['new_group']), drupal_render($form['new_submit']));
  }
  else {
    // Keep the UI consistent.
    $form['new_rid']['#prefix'] = '<table><tr class="odd"><td>';
    $form['new_rid']['#suffix'] = '</td><td>';
    $form['new_group']['#suffix'] = '</td><td>';
    $form['new_submit']['#suffix'] = '</td><td>';
    $form['cancel'] = array(
      '#type' => 'markup',
      '#value' => l(t('Cancel'), 'admin/config/webauth/mappings'),
      '#suffix' => '</td></tr></table>',
    );
  }
  $header = array(
    t('Drupal Role'),
    t('Workgroup (e.g. stanford:staff)'),
    t('Action')
  );
  $form['add_roles'] = array(
    '#markup' => theme('table', array(
      'header' => $header,
      'rows' => $table,
    )),
  );

  //$result = db_query("SELECT wr.warid, r.name, wr.wa_group as `group` FROM {webauth_roles} wr INNER JOIN {role} r ON wr.rid = r.rid WHERE r.rid > 2");
  // while ($group = $result->fetchObject()) {
  //   $button_id = 'remove_warid_' . $group->warid;
  //   $form[$button_id] = array(
  //     '#name' => $button_id,
  //     '#type' => 'submit',
  //     '#value' => t('Remove Mapping'),
  //   );
  //   $row = array($group->name, $group->group, drupal_render($form[$button_id]));
  //   $table[] = $row;
  // }


  // END ROLE MAPPING FORM.

  return system_settings_form($form);
}


/**
 * The login block and forms form form.
 * @param  [type] $form        [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_login_block_forms_form($form, &$form_state) {

  $form['stanford_ssp_show_local_login'] = array(
    '#type' => 'switch',
    '#title' => t('Enable local login form on user page'),
    '#default_value' => variable_get('stanford_ssp_show_local_login', TRUE),
    '#description' => t("Turn on to show the local Drupal account login option on the user page."),
  );

  $form['stanford_ssp_show_sso_login'] = array(
    '#type' => 'switch',
    '#title' => t('Enable SSO login link on user page'),
    '#default_value' => variable_get('stanford_ssp_show_sso_login', TRUE),
    '#description' => t("Turn on to show the SSO (SAML) login link on the user page."),
  );

  $form['stanford_ssp_sso_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('SSO (SAML) login link text?'),
    '#default_value' => variable_get('stanford_ssp_sso_link_text', t("Log in with your SUNet ID »")),
    '#description' => t('Override the link text for the SSO login on the user page.'),
  );


  return system_settings_form($form);
}


/**
 * Add a new SSO user account.
 * @param  [type] $form        [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_add_sso_user($form, &$form_state) {

  $form['sunetid'] = array(
    '#type' => 'textfield',
    '#title' => t('SUNetID'),
    '#description' => t('Enter the SUNetID of the user you wish to add.'),
    '#required' => TRUE,
  );

  $form['name']  = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('If you wish to specify the user\'s preferred name (instead of sunetid@stanford.edu), enter it here.'),
  );

  $form['email']  = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#description' => t('If you wish to specify an alternate email address (instead of sunetid@stanford.edu), enter it here.'),
  );

  $roles = user_roles(TRUE);
  $form["roles"] = array(
    '#title' => "Roles",
    '#description' => t("Add roles to the new user account."),
    '#type' => 'select',
    '#options' => $roles,
    '#default_value' => array(1),
    '#multiple' => TRUE,
    '#size' => 7,
  );

  $form['pass'] = array(
    '#type' => 'password_confirm',
    '#size' => 25,
  );

  $form['notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify user of new account'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add SSO User'),
  );

  return $form;
}








































/**
 * Implements hook_form_FORMID_alter().
 *
 * @param  [type] &$form       [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_form_user_login_alter(&$form, &$form_state) {

  $form['saml_auth'] = array(
    '#type' => 'fieldset',
    '#title' => "SUNet Login",
    '#weight' => -10,
  );

  $link_text = variable_get("stanford_ssp_sso_link_text", t("Log in with your SUNet ID »"));

  $form['saml_auth']['saml_link'] = array(
    '#prefix' => "<p>",
    '#markup' => l($link_text, "saml_login"),
    '#suffix' => "</p>",
  );

  $form['drupal_auth'] = array(
    '#type' => 'fieldset',
    '#title' => "Drupal Login",
    '#weight' => 0,
  );

  // Remove the Federated login link.
  if (isset($form["links"])) {
    unset($form["links"]);
  }

}




































/**
 * Handle 403 errors by redirecting users to saml_login for login.
 *
 * If, however, they are already logged in and don't have access
 * (for instance, a normal user requesting /admin), then display
 * a normal error message.
 */
// function stanford_ssp_error_page() {
//   // Figure out where the user is trying to go before redirecting him.
//   $dest = drupal_get_destination();
//   // We have to unset $_GET['destination'] here, otherwise drupal_goto() will ignore the $path argument.
//   // See https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_goto/7.
//   unset($_GET['destination']);
//   // Redirect the user to saml_login, then send him on his way.
//   drupal_goto('saml_login', array('query' => $dest));
// }

/**
 *
 * Implements hook_form().
 *
 * Configuration form for the SimpleSAML PHP role mapping.
 *
 * @param $form
 * @param $form_state
 */
// function stanford_ssp_mapping_form($form, &$form_state) {
//   $roles = user_roles(TRUE);
//   $roles = array_combine($roles, $roles);
//   $form['mappings'] = array(
//     '#type' => 'fieldset',
//     '#title' => t('Role Mappings'),
//     '#description' => t('Map a SimpleSAML PHP entitlement to a Drupal role.'),
//   );
//   $form['mappings']['entitlement'] = array(
//     '#type' => 'textfield',
//     '#title' => t('Entitlement'),
//     '#required' => TRUE,
//   );
//   $form['mappings']['role'] = array(
//     '#type' => 'select',
//     '#title' => t('Drupal Role'),
//     '#required' => TRUE,
//     '#options' => $roles,
//   );
//   $form['submit'] = array(
//     '#type' => 'submit',
//     '#value' => t('Add Role Mapping'),
//   );
//   return $form;
// }

/**
 *
 * Implements hook_form_submit().
 *
 * @param $form
 * @param $form_state
 */
// function stanford_ssp_mapping_form_submit($form, &$form_state) {
//   $entitlement = $form_state['values']['entitlement'];
//   $role = $form_state['values']['role'];
//   stanford_ssp_map_entitlement_to_role($entitlement, $role);
// }

/**
 * @param string $entitlement A value in eduPersonEntitlement, e.g., anchorage_support
 * @param string $role The name of the role
 *
 * Map an entitlement to a role.
 */
// function stanford_ssp_map_entitlement_to_role($entitlement, $role) {
//   $entitlement = check_plain($entitlement);
//   // look up rid
//   $role_object = user_role_load_by_name($role);
//   if (!$role_object) {
//     drupal_set_message(t('No role exists with the name "@role"', array('@role' => $role)), 'error');
//   }
//   else {
//     $rid = $role_object->rid;
//     // look up current role mapping, if any
//     $role_mapping = variable_get('simplesamlphp_auth_rolepopulation');
//     if (!empty($role_mapping)) {
//       $role_mapping .= "|";
//     }
//     // Add our mapping
//     $role_mapping .= $rid . ":eduPersonEntitlement,=," . $entitlement;
//     // Save our mapping
//     variable_set('simplesamlphp_auth_rolepopulation', $role_mapping);
//     $message = t('Mapped the "@entitlement" entitlement to the "@role" role.', array('@entitlement' => $entitlement, '@role' => $role));
//     drupal_set_message($message);
//     watchdog('stanford_ssp', $message);
//   }
// }

/**
 * Implements hook_theme_registry_alter().
 */
// function stanford_ssp_theme_registry_alter(&$theme_registry) {
//   $theme_registry['webform_view_messages']['function'] = 'stanford_ssp_webform_login';
// }

/**
 * Overrides theme_webform_view_messages().
 * Send user to saml_login instead of user/login if he doesn't have access to the form.
 */
// function stanford_ssp_webform_login($variables) {
//   global $user;

//   $node = $variables['node'];
//   $page = $variables['page'];
//   $submission_count = $variables['submission_count'];
//   $user_limit_exceeded = $variables['user_limit_exceeded'];
//   $total_limit_exceeded = $variables['total_limit_exceeded'];
//   $allowed_roles = $variables['allowed_roles'];
//   $closed = $variables['closed'];
//   $cached = $variables['cached'];

//   $type = 'warning';

//   if ($closed) {
//     $message = t('Submissions for this form are closed.');
//   }
//   elseif ($node->webform['confidential'] && user_is_logged_in()) {
//     $message = t('This form is confidential. You much <a href="!url">Log out</a> to submit it.',
//       array('!url' => url('/user/logout', array('query' => array('destination' => request_uri())))));
//   }
//   // If open and not allowed to submit the form, give an explanation.
//   elseif (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
//     if (empty($allowed_roles)) {
//       // No roles are allowed to submit the form.
//       $message = t('Submissions for this form are closed.');
//     }
//     elseif ($user->uid == 0) {
//       // The user is anonymous, so (at least) needs to log in to view the form.
//       $login = url('saml_login', array('query' => drupal_get_destination()));
//       $register = url('user/register', array('query' => drupal_get_destination()));
//       if (variable_get('user_register', 1) == 0) {
//         $message = t('You must <a href="!login">log in with your SUNetID</a> to view this form.', array('!login' => $login));
//       }
//       else {
//         $message = t('You must <a href="!login">log in with your SUNetID</a> or <a href="!register">register</a> to view this form.', array('!login' => $login, '!register' => $register));
//       }
//     }
//     else {
//       // The user must be some other role to submit.
//       $message = t('You do not have permission to view this form.');
//       $type = 'error';
//     }
//   }

//   // If the user has exceeded the limit of submissions, explain the limit.
//   elseif ($user_limit_exceeded && !$cached) {
//     if ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] > 1) {
//       $message = t('You have submitted this form the maximum number of times (@count).', array('@count' => $node->webform['submit_limit']));
//     }
//     elseif ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] == 1) {
//       $message = t('You have already submitted this form.');
//     }
//     else {
//       $message = t('You may not submit another entry at this time.');
//     }
//   }
//   elseif ($total_limit_exceeded && !$cached) {
//     if ($node->webform['total_submit_interval'] == -1 && $node->webform['total_submit_limit'] > 1) {
//       $message = t('This form has received the maximum number of entries.');
//     }
//     else {
//       $message = t('You may not submit another entry at this time.');
//     }
//   }

//   // If the user has submitted before, give them a link to their submissions.
//   if ($submission_count > 0 && $node->webform['submit_notice'] == 1 && !$cached) {
//     if (empty($message)) {
//       $message = t('You have already submitted this form.');
//       $type = 'status';
//     }
//     $message .= ' ' . t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/' . $node->nid . '/submissions')));
//   }

//   if ($page && isset($message)) {
//     drupal_set_message($message, $type, FALSE);
//   }
// }

