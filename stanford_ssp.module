<?php

/**
 * @file
 * stanford_ssp.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\stanford_ssp\Form\AuthorizationsForm;
use Drupal\user\UserInterface;

/**
 * Implements hook_config_schema_info_alter().
 */
function stanford_ssp_config_schema_info_alter(&$definitions) {
  // Change the eval_every_time from boolean to integer so we can have addtional
  // functionality when evaluating roles.
  $definitions['simplesamlphp_auth.settings']['mapping']['role']['mapping']['eval_every_time']['type'] = 'integer';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_ssp_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['simplesamlphp_auth_login_link'])) {
    $form['simplesamlphp_auth_login_link']['#attributes']['class'][] = 'decanter-button';
    $form['simplesamlphp_auth_login_link']['#attributes']['rel'] = 'nofollow';
    $config = \Drupal::config('stanford_ssp.settings');

    // If configured to disallow local login, hide the local login form parts.
    if ($config->get('hide_local_login')) {
      unset($form['name'], $form['pass'], $form['actions']);
      return;
    }
    // Moves the original form elements into a collapsed group.
    $form['simplesamlphp_auth_login_link']['#weight'] = -99;
    $form['manual'] = [
      '#type' => 'details',
      '#title' => t('Drupal Login'),
      '#open' => FALSE,
    ];
    $form['manual']['name'] = $form['name'];
    $form['manual']['pass'] = $form['pass'];
    $form['manual']['actions'] = $form['actions'];
    $form['manual']['actions']['reset'] = Link::createFromRoute(t('Reset Password'), 'user.pass')
      ->toRenderable();
    unset($form['name'], $form['pass'], $form['actions']);
  }
}

/**
 * Implements hook_simplesamlphp_auth_allow_login().
 */
function stanford_ssp_simplesamlphp_auth_allow_login($attributes) {
  $config = \Drupal::config('stanford_ssp.settings');
  if ($config->get('restriction') == AuthorizationsForm::ALLOW_ALL) {
    return TRUE;
  }

  /** @var \Drupal\simplesamlphp_auth\Service\SimplesamlphpAuthManager $auth_manager */
  $auth_manager = \Drupal::service('simplesamlphp_auth.manager');
  $authname = $auth_manager->getAuthname();

  if (in_array($authname, $config->get('whitelist_users'))) {
    return TRUE;
  }

  if ($config->get('use_workgroup_api')) {
    /** @var \Drupal\stanford_ssp\Service\StanfordSSPWorkgroupApiInterface $workgroup_api */
    $workgroup_api = \Drupal::service('stanford_ssp.workgroup_api');
    return $workgroup_api->userInAnyGroup($config->get('whitelist_groups'), $authname);
  }

  $saml_attribute = $config->get('saml_attribute') ?: 'eduPersonEntitlement';
  foreach ($config->get('whitelist_groups') as $group) {
    if (!empty($attributes[$saml_attribute]) && in_array($group, $attributes[$saml_attribute])) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_simplesamlphp_auth_existing_user().
 */
function stanford_ssp_simplesamlphp_auth_existing_user($attributes) {
  $saml_mail = $attributes['eduPersonPrincipalName'];

  if (!empty($saml_mail)) {
    $saml_mail = is_array($saml_mail) ? reset($saml_mail) : $saml_mail;
    $existing_users = \Drupal::service('entity.manager')
      ->getStorage('user')
      ->loadByProperties(['mail' => $saml_mail]);
    return is_array($existing_users) && !empty($existing_users) ? reset($existing_users) : FALSE;
  }
  return FALSE;
}

/**
 * Implements hook_simplesamlphp_auth_user_attributes().
 *
 * Set the display name field for the user from the attributes.
 *
 * @see https://www.drupal.org/node/2935428
 */
function stanford_ssp_simplesamlphp_auth_user_attributes(UserInterface $account, $attributes) {
  if ($account->hasField('field_user_name') && !empty($attributes['displayName'])) {
    $account->set('field_user_name', $attributes['displayName']);
    return $account;
  }
  return FALSE;
}
