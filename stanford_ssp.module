<?php
/**
 * @file
 * Code for the Stanford SimpleSAML PHP module.
 */

/**
 * Implements hook_menu().
 */

function stanford_ssp_menu() {
  $items = array();

  // Authpoint
  // ---------

  $items['sso/login'] = array(
    'title' => "Stanford SSO Authentication Endpoint",
    'description' => "Authentication endpoint.",
    'page callback' => 'stanford_ssp_sso_auth',
    'access callback' => "user_is_anonymous",
  );

  $items['sso/denied-test'] = array(
    'title' => "Always denied",
    'description' => "Authentication endpoint test.",
    'page callback' => 'stanford_ssp_sso_auth',
    'access callback' => FALSE,
  );

  // Configuration Forms
  // -------------------

  $items['admin/config/stanford/stanford_ssp'] = array(
    'title' => "Stanford SSO (SAML)",
    'description' => "Stanford Single Sign On (SAML) configuration settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_configuration_form"),
    'access arguments' => array('administer stanford_ssp'),
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/settings'] = array(
    'title' => "Stanford SSO (SAML)",
    'description' => "Stanford Single Sign On (SAML) configuration settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_configuration_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/authorizations'] = array(
    'title' => "Authorizations",
    'description' => "Configure authorization dynamics.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_authorizations_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/role-mappings'] = array(
    'title' => "Role Mappings",
    'description' => "Configure role assignments for authenticated users.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_role_mappings_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/login-block-forms'] = array(
    'title' => "Login Block & Forms",
    'description' => "Configure role assignments for authenticated users.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_login_block_forms_form"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  $items['admin/config/stanford/stanford_ssp/add-sso-user'] = array(
    'title' => "Add SSO User",
    'description' => "Create a new user through the SSO.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("stanford_ssp_add_sso_user"),
    'access arguments' => array('administer stanford_ssp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_ssp.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function stanford_ssp_permission() {
  return array(
    'administer stanford_ssp' => array(
      'title' => t('Administer Stanford SSP'),
      'description' => t('Administrate the configuration for the Stanford SSP module.'),
    ),
  );
}

/**
 * Implements hook_init().
 *
 * Tried to use hook boot but too few api functions were available.
 */
function stanford_ssp_init() {

  // If the user is anonymous then end the journey.
  // We don't worry about those suckers.
  $anon = user_is_anonymous();
  if ($anon) {
    return;
  }

  // Check to force https for authenticated users.
  stanford_ssp_force_https();

  // Check for cache setting:
  if (variable_get("stanford_ssp_prevent_cache", FALSE)) {
    header("Cache-Control: no-store, no-cache, must-revalidate");
  }

}

/**
 * Implements hook_user_login().
 */
function stanford_ssp_user_login() {
   // Redirect the user if setting available.
   $stanford_ssp_redirect_on_login = variable_get("stanford_ssp_redirect_on_login", FALSE);
   if (!empty($stanford_ssp_redirect_on_login)) {
    drupal_goto($stanford_ssp_redirect_on_login);
   }
}

/**
 * Authentication Endpoint.
 * @return [type] [description]
 */
function stanford_ssp_sso_auth() {
  $output = array();

  // Check to force https for authenticated users.
  stanford_ssp_force_https();

  // A way in to simplesaml.
  module_load_include("inc", "simplesamlphp_auth", "simplesamlphp_auth.pages");
  simplesamlphp_auth_loginpage();

  return $output;
}

/**
 * Checks to ensure user is on https and will force redirect if setting is enabled.
 *
 * @return [type] [description]
 */
function stanford_ssp_force_https() {

  global $is_https;
  // If is https force secure cookies. Mmmmm cookies.
  if ($is_https) {
    // Mandate secure cookies for sessions.
    ini_set('session.cookie_secure', 1);
    // Session cookies should be deleted when the browser session ends.
    ini_set('session.cookie_lifetime', 0);
    return;
  }

  // Check if setting is on. If not then end.
  $force = variable_get("stanford_ssp_force_https", FALSE);
  if (!$force) {
    return;
  }

  // Force a redirect to https.
  $redirect_url = "https://" . check_plain($_SERVER['HTTP_HOST']) . check_plain($_SERVER['REQUEST_URI']);
  header("Location: " . $redirect_url);
  drupal_exit();

}

/**
 * Implements hook_form_FORMID_alter().
 *
 * @param  [type] &$form       [description]
 * @param  [type] &$form_state [description]
 * @return [type]              [description]
 */
function stanford_ssp_form_user_login_alter(&$form, &$form_state) {

  // Check for https forcing:
  stanford_ssp_force_https();

  // Remove the Federated login link because it is ugly.
  if (isset($form["links"])) {
    unset($form["links"]);
  }

  $show_sso = variable_get("stanford_ssp_show_sso_login", TRUE);
  $show_local = variable_get("stanford_ssp_show_local_login", TRUE);

  // Display (or not) the login link for SSO (SAML).
  if ($show_sso) {
    $form['saml_auth'] = array(
      '#type' => 'fieldset',
      '#title' => "SUNet Login",
      '#weight' => -10,
    );
    $link_text = variable_get("stanford_ssp_sso_link_text", t("Log in with your SUNet ID Â»"));
    $form['saml_auth']['saml_link'] = array(
      '#prefix' => "<p>",
      '#markup' => l($link_text, "sso/login"),
      '#suffix' => "</p>",
    );
  }

  // If local logen form is enabled add a fieldset to title it.
  if ($show_local) {
    // Add the fieldset for the Drupal login form.
    $form['drupal_auth'] = array(
      '#type' => 'fieldset',
      '#title' => "Drupal Login",
      '#weight' => 0,
    );
  }

  // If not showing local we need to unset the login form items.
  if (!$show_local) {
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);
  }

  // If nothing available print out a message.
  if (!$show_local && !$show_sso) {
    $form["nothingtoseehere"]["#markup"] = "<h3>No login options available.</h3>";
  }

}

/**
 * [stanford_ssp_page_build description]
 * @param  [type] &$page [description]
 * @return [type]        [description]
 */
function stanford_ssp_page_build(&$page) {
  $headers = drupal_get_http_header();
  if (isset($headers["status"]) && $headers["status"] == "403 Forbidden" && user_is_anonymous()) {
    if (variable_get("stanford_ssp_automagic_login", FALSE)) {
      unset($_GET['destination']);
      drupal_goto("sso/login");
    }
  }
}





/**
 * Handle 403 errors by redirecting users to saml_login for login.
 *
 * If, however, they are already logged in and don't have access
 * (for instance, a normal user requesting /admin), then display
 * a normal error message.
 */
// function stanford_ssp_error_page() {
//   // Figure out where the user is trying to go before redirecting him.
//   $dest = drupal_get_destination();
//   // We have to unset $_GET['destination'] here, otherwise drupal_goto() will ignore the $path argument.
//   // See https://api.drupal.org/api/drupal/includes!common.inc/function/drupal_goto/7.
//   unset($_GET['destination']);
//   // Redirect the user to saml_login, then send him on his way.
//   drupal_goto('saml_login', array('query' => $dest));
// }

/**
 *
 * Implements hook_form().
 *
 * Configuration form for the SimpleSAML PHP role mapping.
 *
 * @param $form
 * @param $form_state
 */
// function stanford_ssp_mapping_form($form, &$form_state) {
//   $roles = user_roles(TRUE);
//   $roles = array_combine($roles, $roles);
//   $form['mappings'] = array(
//     '#type' => 'fieldset',
//     '#title' => t('Role Mappings'),
//     '#description' => t('Map a SimpleSAML PHP entitlement to a Drupal role.'),
//   );
//   $form['mappings']['entitlement'] = array(
//     '#type' => 'textfield',
//     '#title' => t('Entitlement'),
//     '#required' => TRUE,
//   );
//   $form['mappings']['role'] = array(
//     '#type' => 'select',
//     '#title' => t('Drupal Role'),
//     '#required' => TRUE,
//     '#options' => $roles,
//   );
//   $form['submit'] = array(
//     '#type' => 'submit',
//     '#value' => t('Add Role Mapping'),
//   );
//   return $form;
// }

/**
 *
 * Implements hook_form_submit().
 *
 * @param $form
 * @param $form_state
 */
// function stanford_ssp_mapping_form_submit($form, &$form_state) {
//   $entitlement = $form_state['values']['entitlement'];
//   $role = $form_state['values']['role'];
//   stanford_ssp_map_entitlement_to_role($entitlement, $role);
// }

/**
 * @param string $entitlement A value in eduPersonEntitlement, e.g., anchorage_support
 * @param string $role The name of the role
 *
 * Map an entitlement to a role.
 */
// function stanford_ssp_map_entitlement_to_role($entitlement, $role) {
//   $entitlement = check_plain($entitlement);
//   // look up rid
//   $role_object = user_role_load_by_name($role);
//   if (!$role_object) {
//     drupal_set_message(t('No role exists with the name "@role"', array('@role' => $role)), 'error');
//   }
//   else {
//     $rid = $role_object->rid;
//     // look up current role mapping, if any
//     $role_mapping = variable_get('simplesamlphp_auth_rolepopulation');
//     if (!empty($role_mapping)) {
//       $role_mapping .= "|";
//     }
//     // Add our mapping
//     $role_mapping .= $rid . ":eduPersonEntitlement,=," . $entitlement;
//     // Save our mapping
//     variable_set('simplesamlphp_auth_rolepopulation', $role_mapping);
//     $message = t('Mapped the "@entitlement" entitlement to the "@role" role.', array('@entitlement' => $entitlement, '@role' => $role));
//     drupal_set_message($message);
//     watchdog('stanford_ssp', $message);
//   }
// }

/**
 * Implements hook_theme_registry_alter().
 */
// function stanford_ssp_theme_registry_alter(&$theme_registry) {
//   $theme_registry['webform_view_messages']['function'] = 'stanford_ssp_webform_login';
// }

/**
 * Overrides theme_webform_view_messages().
 * Send user to saml_login instead of user/login if he doesn't have access to the form.
 */
// function stanford_ssp_webform_login($variables) {
//   global $user;

//   $node = $variables['node'];
//   $page = $variables['page'];
//   $submission_count = $variables['submission_count'];
//   $user_limit_exceeded = $variables['user_limit_exceeded'];
//   $total_limit_exceeded = $variables['total_limit_exceeded'];
//   $allowed_roles = $variables['allowed_roles'];
//   $closed = $variables['closed'];
//   $cached = $variables['cached'];

//   $type = 'warning';

//   if ($closed) {
//     $message = t('Submissions for this form are closed.');
//   }
//   elseif ($node->webform['confidential'] && user_is_logged_in()) {
//     $message = t('This form is confidential. You much <a href="!url">Log out</a> to submit it.',
//       array('!url' => url('/user/logout', array('query' => array('destination' => request_uri())))));
//   }
//   // If open and not allowed to submit the form, give an explanation.
//   elseif (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
//     if (empty($allowed_roles)) {
//       // No roles are allowed to submit the form.
//       $message = t('Submissions for this form are closed.');
//     }
//     elseif ($user->uid == 0) {
//       // The user is anonymous, so (at least) needs to log in to view the form.
//       $login = url('saml_login', array('query' => drupal_get_destination()));
//       $register = url('user/register', array('query' => drupal_get_destination()));
//       if (variable_get('user_register', 1) == 0) {
//         $message = t('You must <a href="!login">log in with your SUNetID</a> to view this form.', array('!login' => $login));
//       }
//       else {
//         $message = t('You must <a href="!login">log in with your SUNetID</a> or <a href="!register">register</a> to view this form.', array('!login' => $login, '!register' => $register));
//       }
//     }
//     else {
//       // The user must be some other role to submit.
//       $message = t('You do not have permission to view this form.');
//       $type = 'error';
//     }
//   }

//   // If the user has exceeded the limit of submissions, explain the limit.
//   elseif ($user_limit_exceeded && !$cached) {
//     if ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] > 1) {
//       $message = t('You have submitted this form the maximum number of times (@count).', array('@count' => $node->webform['submit_limit']));
//     }
//     elseif ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] == 1) {
//       $message = t('You have already submitted this form.');
//     }
//     else {
//       $message = t('You may not submit another entry at this time.');
//     }
//   }
//   elseif ($total_limit_exceeded && !$cached) {
//     if ($node->webform['total_submit_interval'] == -1 && $node->webform['total_submit_limit'] > 1) {
//       $message = t('This form has received the maximum number of entries.');
//     }
//     else {
//       $message = t('You may not submit another entry at this time.');
//     }
//   }

//   // If the user has submitted before, give them a link to their submissions.
//   if ($submission_count > 0 && $node->webform['submit_notice'] == 1 && !$cached) {
//     if (empty($message)) {
//       $message = t('You have already submitted this form.');
//       $type = 'status';
//     }
//     $message .= ' ' . t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/' . $node->nid . '/submissions')));
//   }

//   if ($page && isset($message)) {
//     drupal_set_message($message, $type, FALSE);
//   }
// }

